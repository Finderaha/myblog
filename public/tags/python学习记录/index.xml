<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python学习记录 on Finder</title><link>https://finderaha.com/tags/python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link><description>Recent content in Python学习记录 on Finder</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 18 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://finderaha.com/tags/python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/index.xml" rel="self" type="application/rss+xml"/><item><title>一个python新浪面试题</title><link>https://finderaha.com/cn/2024/08/18/python/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://finderaha.com/cn/2024/08/18/python/</guid><description>以下是一道新浪微博面试题，我们将详细拆解该题目。
data_list = [lambda x: x + i for i in range(10)] # [函数, 函数, 函数] i=9 v1 = data_list[0](100) v2 = data_list[3](100) print(v1, v2) # 109 109 如果不仔细阅题，可能会得出&amp;quot;100&amp;quot;和&amp;quot;102&amp;quot;的答案。有趣的是，如果将此题目输入ChatGPT-4或Kimi，它们会给出&amp;quot;100&amp;quot;和&amp;quot;103&amp;quot;的答案。唯一给出正确答案的是Claude 3.5（值得表扬）。
为了便于后续拆解题目，让我们先复习一些相关知识：
推导式 推导式（Comprehension）是Python中一种简洁而强大的语法特性，用于创建列表、字典、集合或生成器。它允许你用一行简洁的代码替代更冗长的for循环。让我们详细了解各种类型的推导式：
列表推导式（List Comprehension）:
基本语法：[expression for item in iterable if condition]
例子：
squares = [x**2 for x in range(10)] # 结果：[0, 1, 4, 9, 16, 25, 36, 49, 64, 81] 字典推导式（Dictionary Comprehension）:
基本语法：{key_expression: value_expression for item in iterable if condition}</description></item><item><title>用python写一个11点游戏</title><link>https://finderaha.com/cn/2024/05/19/python/</link><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid>https://finderaha.com/cn/2024/05/19/python/</guid><description>这周完成了 python 数据类型和循环语句的学习，因为之前有过了解，学习还相对轻松。做作业时，有个题目很有意思，记录一下。
题目 Python代码模拟一个简单的抓牌游戏，游戏规则如下：
扑克牌由四种花色（黑桃、红桃、梅花、方块）和1到14的数字组成，加上大王和小王两张特殊牌。
记分规则： J、Q、K、小王、大王代表的值为0.5，其他就是则就是当前的牌面值。
发牌规则： 默认先给用户发一张牌，用户根据自己的情况判断是否继续要牌。要，则再给他发一张。不要，则开始给下个玩家发牌。
如果用户手中的所有牌相加大于11，则表示爆了，分数归0，并且自动开始给下个人发牌。
输赢规则：将所有牌抓完后，比较分数大小，分数大的获胜
Python方法 pythonimport random# 初始化纸牌poker_color = [&amp;#39;黑桃&amp;#39;, &amp;#39;红桃&amp;#39;, &amp;#39;梅花&amp;#39;, &amp;#39;方块&amp;#39;]poker_list = [(&amp;#39;大王&amp;#39;, 15), (&amp;#39;小王&amp;#39;, 14)]for color in poker_color:for number in range(1, 14): # 扑克牌的数字通常是A到Kpoker_list.append((color, number)) # 修正为添加花色和数字的元组# 初始化玩家和分数user_list = [&amp;#34;alex&amp;#34;, &amp;#34;武沛齐&amp;#34;, &amp;#34;李路飞&amp;#34;]result_score = {user: 0 for user in user_list} # 初始化每个玩家的分数为0while poker_list: #抓牌流程，直到纸牌被抓空，列表为空时为Falsefor user in user_list: #3个用户完成一轮抓牌#1个玩家的抓牌流程while poker_list: print(f&amp;#34;轮到 {user} 抓牌。&amp;#34;)if not poker_list:print(f&amp;#34;{user} 抓牌时发现牌堆已经空了。&amp;#34;)breakindex = random.</description></item><item><title>Python学习</title><link>https://finderaha.com/cn/2024/05/11/python/</link><pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate><guid>https://finderaha.com/cn/2024/05/11/python/</guid><description>从 21 年开始，因为各种原因，都想过要学习一门编程语言，始终没坚持下来。最近因为收入压力，希望能借助编程赚一点外快，下定决心要学习一门编程语言。
对于一个没有编程基础的人来说，未知是最难逾越的障碍。即便前面陆续学过一点基础语法知识 ，但距离真正的写项目代码，中间仍然有非常大的鸿沟。所以，找到一个合适自己的教程是首要问题。
起初我是打算报个班的，一是解决自制力不足，无法每天学习问题；二是编写代码过程中会遇到很多问题，需要有人指导。咨询了一下，市面上靠点谱的培训都在 1w 左右，主打的基本都是系统的课程、1 对 1 老师答疑、包就业。但是看参加培训的人反馈，差强人意（主要还是穷）。而且每天跟程序员打交道，真遇到不会的问题，可以当面问这些可爱的“亲人”。果断在淘宝上花50购买了一个体系课程。
学习计划： Python 体系化开发学习 学习目标 可以独立完成 python 项目开发 验证标准 1. 医院自助挂号系统搭建 2. 自媒体“刚刚”自动化更新流程搭建 学习周期 2024年 5 月 - 24 年 11 月 学习路径 学习阶段 学习周期 学习内容 第1关: 开发基础 12天 Python开发基础、数据类型、流程控制、字符编码、⽂件IO操作、股票分析、抽奖程序 第2关: 函数编程 12天 函数、递归、闭包、装饰器、迭代器、re正则、邮件处理、excel处理、⽇期模块、加密模块、ssh客户端、logging处理、ATM程序、炸⾦花游戏 第3关: ⾯向对象&amp;amp;⽹络编程&amp;amp;并发 11天 类&amp;amp;对象&amp;amp;实例、私有变量、静态变量、反射、MetaClass、构造⽅法、封装、多态、继承、领域建模。
TCP/IP原理剖析、Socket模块、粘包问题、⽹络消息传送、⽂件传输、⽂件完整性校验、⽹络通信安全、SocketServer源码剖析\线程、进程、协程、IO多路复⽤模型 、信号、锁、管道、队列。 第4关: 数据库开发 6天 Mysql数据库表结构设计、SQL语句、索引设计 、事务ACID、触发器、存储过程、图书管理系统设计实战 第5关: WEB前端开发 16天 1. HTML标签 2. CSS元素渲染和布局 3. JavaScript基本语法 4. jQuery框架&amp;amp;BootStrap框架 5. 实战开发案例：⼩⽶商城⻚⾯设计开发 第6关: ⼤名鼎鼎的Django 17天 1.</description></item></channel></rss>